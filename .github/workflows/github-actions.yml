name: CI/CD Pipeline for Zero2K8s (Helm)
on:
  # Trigger on pushes to the main branch (e.g., after a PR merge)
  push:
    branches: [ main, devops-staging ] 
  # Trigger on Pull Requests targeting main or devops-staging
  pull_request:
    branches: [ main, devops-staging ] 
  # Optional: Allow manual trigger
  # workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # fetch-depth: 0 # Uncomment if full history is needed

    # --- Caching steps ---
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.ref }}-${{ github.sha }} 
        restore-keys: |
          ${{ runner.os }}-docker-${{ github.ref }}-
          ${{ runner.os }}-docker-
    - name: Cache Minikube Base Image and Preload
      uses: actions/cache@v4
      with:
        path: ~/.minikube/cache
        key: ${{ runner.os }}-minikube-${{ github.sha }} 
        restore-keys: |
          ${{ runner.os }}-minikube-

    # --- Docker steps ---
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # --- Corrected Docker Build Step ---
    - name: Build and push COP Docker image
      uses: docker/build-push-action@v6
      with:
        # Build context is project root
        context: . 
        # Path to Dockerfile relative to project root
        file: ./docker/Dockerfile 
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} 
        tags: metanets/zero2k8s-cop:latest 
    # --- End Corrected Docker Build Step ---

    # --- Kubernetes & Helm steps ---
    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
    - name: Start Minikube
      run: |
        minikube start --driver=docker --kubernetes-version=v1.32.0 --wait=all 
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    - name: Install Helm
      run: |
        echo "Checking Helm version..."
        helm version

    # --- Helm Deployment Step ---
    - name: Deploy Helm Chart
      run: |
        NAMESPACE="zero2k8s"
        CHART_DIR="./helm/zero2k8s-chart"
        RELEASE_NAME="zero2k8s-stack" 
        VALUES_FILE="${CHART_DIR}/values.yaml" 

        echo "Ensuring namespace '${NAMESPACE}' exists..."
        kubectl create namespace "${NAMESPACE}" --dry-run=client -o yaml | kubectl apply -f -
        
        echo "Updating Helm dependencies..."
        helm dependency update "${CHART_DIR}"
        
        echo "Deploying/Upgrading Helm release '${RELEASE_NAME}'..."
        helm upgrade --install "${RELEASE_NAME}" "${CHART_DIR}" \
          --namespace "${NAMESPACE}" \
          -f "${VALUES_FILE}" \
          --wait --timeout 10m --atomic 

        echo "Basic Helm deployment successful. Performing checks..."
        echo "Verifying pod status..."
        kubectl get pods -n "${NAMESPACE}"
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n ${NAMESPACE} --timeout=5m || (echo "Prometheus pod wait timed out"; exit 1)
        kubectl wait --for=condition=available deployment -l app.kubernetes.io/name=grafana -n ${NAMESPACE} --timeout=5m || (echo "Grafana deployment wait timed out"; exit 1)
        # Corrected label selector for COP deployment based on helm template
        kubectl wait --for=condition=available deployment -l app=zero2k8s-cop -n ${NAMESPACE} --timeout=2m || (echo "COP deployment wait timed out"; exit 1)

        echo "Getting Service URL and testing COP endpoint..."
        # Corrected service name based on helm template
        COP_SERVICE_NAME="${RELEASE_NAME}-zero2k8s-chart-cop-service" 
        kubectl port-forward svc/${COP_SERVICE_NAME} ${RANDOM_PORT:-8080}:80 -n ${NAMESPACE} &
        PF_PID=$!
        sleep 5 
        SERVICE_URL="http://127.0.0.1:${RANDOM_PORT:-8080}"
        echo "Testing URL: $SERVICE_URL"
        curl -f $SERVICE_URL/ || (echo "COP root test failed"; kill $PF_PID; exit 1)
        echo "COP root test passed."
        kill $PF_PID
    # --- End Helm Deployment Step ---

    # Debug step remains useful
    - name: Debug on failure
      if: failure()
      run: |
        echo "==== GET ALL IN NAMESPACE ===="
        kubectl get all -n zero2k8s || true
        echo "==== HELM STATUS ===="
        helm status zero2k8s-stack -n zero2k8s || true
        echo "==== DESCRIBE FAILED PODS (if any) ===="
        kubectl describe pod -n zero2k8s --field-selector=status.phase!=Running,status.phase!=Succeeded || true
        echo "==== GET EVENTS ===="
        kubectl get events -n zero2k8s --sort-by='.lastTimestamp' || true

    # Cleanup step remains the same
    - name: Cleanup
      if: always()
      run: |
        echo "Stopping Minikube cluster..."
        minikube stop || true
        minikube delete --all --purge || true 
